package _02_09

// 2.9 closures

//region
//----------------------------------------------------------------------------------------------------

// closure 类似于 java 中的 lambda, 如下定义一个 closure, 并赋值给一个变量,
def closure01 = { x -> println x }

// 执行一个 closure,
closure01('A')
println '--------------------------------------------------'

// 将 closure 作为参数传给方法,
[1, 2, 3].each(closure01)
println '--------------------------------------------------'

[1, 2, 3].each(x -> println x)
println '--------------------------------------------------'
[1, 2, 3].each({ x -> println x })
println '--------------------------------------------------'

// 当 closure 只有一个参数时, 可以通过隐式的变量 it 访问这个参数,
[1, 2, 3].each({ println it })
println '--------------------------------------------------'

// 当 closure 是方法的最后一个参数时, closure 可以放到圆括号的外面,
[1, 2, 3].each() { println it }
println '--------------------------------------------------'

// 空的圆括号 () 可以省略,
[1, 2, 3].each { println it }
println '--------------------------------------------------'

//----------------------------------------------------------------------------------------------------
//endregion

//region
//----------------------------------------------------------------------------------------------------

// 如果没有显式的 return, 则默认返回最后一个表达式,
def closure02 = {
    1 * 1
    2 + 2
    3
}
assert closure02() == 3

//----------------------------------------------------------------------------------------------------
//endregion